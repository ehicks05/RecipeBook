// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model appUser {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime        @updatedAt @map("updated_at") @db.Timestamp
  displayName   String?         @unique @map("display_name")
  recipe        recipe[]
  userFavorites userFavorites[]

  @@map("app_user")
}

model direction {
  id       String @id @default(uuid())
  recipeId String @map("recipe_id")
  index    Int
  text     String
  recipe   recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model ingredient {
  id       String  @id @default(uuid())
  recipeId String  @map("recipe_id")
  name     String
  quantity String
  unit     String?
  recipe   recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model recipe {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime        @updatedAt @map("updated_at") @db.Timestamp
  cookingTime   String          @map("cooking_time")
  course        String?
  description   String
  difficulty    Int
  emoji         String
  name          String
  servings      Int
  authorId      String          @map("author_id")
  author        appUser         @relation(fields: [authorId], references: [id])
  directions    direction[]
  ingredients   ingredient[]
  userFavorites userFavorites[]
}

model userFavorites {
  userId   String  @map("user_id")
  recipeId String  @map("recipe_id")
  recipe   recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  author   appUser @relation(fields: [userId], references: [id])

  @@id([userId, recipeId])
  @@map("user_favorites")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
