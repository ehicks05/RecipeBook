buildscript {
    ext {
        springBootVersion = '2.4.0'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id "com.heroku.sdk.heroku-gradle" version "2.0.0"
}

group 'net.hicks'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9
}

jar {
    baseName = 'RecipeBook'
    version = '0.0.1'
}

bootJar {
  baseName "RecipeBook"
  launchScript()
}

springBoot {
  buildInfo {
    properties {
      group = "net.hicks"
      name = "RecipeBook"
      version = "0.0.1-SNAPSHOT"
    }
  }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.session:spring-session-jdbc'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    //implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'org.postgresql:postgresql:42.2.18'
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.0'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

configurations {
    compile.exclude module: "lettuce"
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacacoReports")
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'net/hicks/recipe/beans/**',
                    'net/hicks/recipe/security/MyAuditListener.class',
                    'net/hicks/recipe/security/PasswordEncoder.class',
                    'net/hicks/recipe/security/SecurityConfig.class',
                    'net/hicks/recipe/security/SecurityConfig$*.*',
                    'net/hicks/recipe/Seeder.class',
                    'net/hicks/recipe/Seeder$*.*',
                    'net/hicks/recipe/MvcConfig.class',
                    'net/hicks/recipe/StartupListener.class',
                    'net/hicks/recipe/Application.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'net/hicks/recipe/beans/**',
                    'net/hicks/recipe/security/MyAuditListener.class',
                    'net/hicks/recipe/security/PasswordEncoder.class',
                    'net/hicks/recipe/security/SecurityConfig.class',
                    'net/hicks/recipe/security/SecurityConfig$*.*',
                    'net/hicks/recipe/Seeder.class',
                    'net/hicks/recipe/Seeder$*.*',
                    'net/hicks/recipe/config/**',
                    'net/hicks/recipe/StartupListener.class',
                    'net/hicks/recipe/Application.class'
            ])
        }))
    }
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
    }
}